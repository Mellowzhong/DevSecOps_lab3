pipeline {
    agent any
    tools {
        gradle 'gradle'
    }
    environment {
        DOCKER_CREDENTIALS_ID = 'dockerhub_credentials' 
        SERVER_IP = '20.51.127.32' 
    }

    stages {
        stage("Checkout repository") {
            steps {
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/Mellowzhong/DevSecOps_lab3']])
            }
        }

        stage('Clair Scan backend image') {
            steps {
                script {
                    // Levantar base de datos y Clair
                    sh 'docker run -d --name clair-db arminc/clair-db:latest'
                    sh 'sleep 10'
                    sh 'docker run -d --name clair --link clair-db:postgres -p 6060:6060 arminc/clair-local-scan:latest'
                    sh 'sleep 10'

                    // Descargar klar (cliente para escanear imágenes con Clair)
                    sh 'wget -nv -O klar https://github.com/optiopay/klar/releases/download/v2.4.0/klar-linux-amd64'
                    sh 'chmod +x klar'

                    // Escanear la imagen Docker
                    def status = sh (
                        script: "CLAIR_ADDR=http://localhost:6060 ./klar victorvaraspro/devsecops-backend:latest",
                        returnStatus: true
                    )
                    if (status != 0) {
                        error "La imagen Docker tiene vulnerabilidades críticas."
                    }
                }
            }
            post {
                always {
                    // Limpiar contenedores temporales
                    sh 'docker rm -f clair clair-db || true'
                }
            }
        }



        stage("Build backend and Push Docker image") {
            steps {
                dir("backend") {

                    sh "chmod +x gradlew || true"
                    sh "./gradlew clean build"
                    script {
                        docker.withRegistry('https://index.docker.io/v1/', 'dockerhub_credentials') {
                            sh "docker build -t victorvaraspro/devsecops-backend:latest ."
                            sh "docker push victorvaraspro/devsecops-backend:latest"
                        }

                    }
                }
            }
        }


        stage("OWASP Dependency Check") {
            steps {
                dir("backend") {
                    sh """
                        curl -L -o dependency-check.zip https://github.com/jeremylong/DependencyCheck/releases/download/v7.4.4/dependency-check-7.4.4-release.zip
        
                        rm -rf dependency-check
        
                        unzip dependency-check.zip
                        echo analyzer.assembly.enabled=false > dependency-check/dependency-check.properties
        
                        dependency-check/bin/dependency-check.sh \
                            --project "devsecops-backend" \
                            --scan . \
                            --format "HTML" \
                            --out "dependency-report" \
                            --propertyfile dependency-check/dependency-check.properties
                    """
                }
            }
            post {
                always {
                    publishHTML(target: [
                        reportDir: 'backend/dependency-report',
                        reportFiles: 'dependency-check-report.html',
                        reportName: 'OWASP Dependency Report'
                    ])
                }
            }
        }




        stage("SAST SonarQube backend") {
            steps {
                dir("backend") {
                    withSonarQubeEnv('SonarQube') {
                        // Ejecutar sin detener el pipeline si falla
                        script {
                            def status = sh (
                                script: "\"${tool 'sonar-scanner'}/bin/sonar-scanner\" " +
                                        "-Dsonar.projectKey=DevSecObs-lab3-backend " +
                                        "-Dsonar.sources=src " +
                                        "-Dsonar.java.binaries=build/classes/java/main " +
                                        "-Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml " +
                                        "-Dsonar.qualitygate.wait=false", // No espera el quality gate
                                returnStatus: true
                            )
        
                            if (status != 0) {
                                echo "⚠ SonarQube analysis failed, but continuing pipeline."
                            }
                        }
                    }
                }
            }
        }





        stage("Build frontend and Push Docker image") {
            steps {
                dir("frontend") {
                    sh "npm install"
                    sh "npm run build"
                    script {
                        docker.withRegistry('https://index.docker.io/v1/', 'dockerhub_credentials') {
                            sh "docker build -t victorvaraspro/devsecops-frontend:latest ."
                            sh "docker push victorvaraspro/devsecops-frontend:latest"
                        }
                    }
                }
            }
        }


        stage("SAST SonarQube frontend") {
            steps {
                dir("frontend") {
                    withSonarQubeEnv('SonarQube') {
                        script {
                            def status = sh (
                                script: "\"${tool 'sonar-scanner'}/bin/sonar-scanner\" " +
                                        "-Dsonar.projectKey=DevSecObs-lab3-frontend " +
                                        "-Dsonar.sources=src " +
                                        "-Dsonar.projectBaseDir=. " +
                                        "-Dsonar.qualitygate.wait=false", // opcional, para no bloquear el pipeline
                                returnStatus: true
                            )
        
                            if (status != 0) {
                                echo "⚠ SonarQube frontend analysis failed, but continuing pipeline."
                            }
                        }
                    }
                }
            }
        }




        stage("Deploy Docker Containers") {
            steps {
                script {
                    docker.withRegistry('', DOCKER_CREDENTIALS_ID) {
                        echo "Deploying backend Container..."

                        // Verificar si el contenedor backend-container ya existe
                        def backendExists = sh(script: "docker ps -a -q -f name=backend-container", returnStdout: true).trim()
                        if (backendExists) {
                            echo "Stopping and removing existing backend-container..."
                            sh "docker stop backend-container || true"
                            sh "docker rm backend-container || true"
                        }

                        // Ejecutar el contenedor del backend con variables de entorno
                        sh "docker run -d --name backend-container -e DB_HOST=${SERVER_IP} -p 8090:8090 victorvaraspro/devsecops-backend:latest"

                        echo "Deploying frontend Container..."

                        // Verificar si el contenedor frontend-container ya existe
                        def frontendExists = sh(script: "docker ps -a -q -f name=frontend-container", returnStdout: true).trim()
                        if (frontendExists) {
                            echo "Stopping and removing existing frontend-container..."
                            sh "docker stop frontend-container || true"
                            sh "docker rm frontend-container || true"
                        }

                        // Ejecutar el contenedor del frontend
                        sh "docker run -d --name frontend-container -p 5173:80 victorvaraspro/devsecops-frontend:latest"
                    }
                }
            }
        }


       stage('DAST ZAP Scan frontend') {
            steps {
                dir('zap-report') {
                    sh """
                        echo "Preparando permisos..."
                        mkdir -p .
                        chmod 777 .
        
                        echo "Ejecutando ZAP para escanear el frontend en http://${SERVER_IP}:5173"
                        docker run --rm -v \$(pwd):/zap/wrk/:rw ghcr.io/zaproxy/zaproxy:stable \
                            zap-baseline.py -t http://${SERVER_IP}:5173 -r zap-report.html || exit 0
        
                        echo "Verificando si se generó el archivo:"
                        ls -lah
                        cat zap-report.html || echo "Archivo zap-report.html no encontrado"
                    """
                }
            }
            post {
                always {
                    publishHTML(target: [
                        reportDir: 'zap-report',
                        reportFiles: 'zap-report.html',
                        reportName: 'OWASP ZAP Report',
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true
                    ])
                }
            }
        }


    }
}
