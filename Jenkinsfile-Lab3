pipeline {
    agent any
    tools {
        maven "maven"
    }
    environment {
        DOCKER_CREDENTIALS_ID = 'dockerhub_credentials' 
        SERVER_IP = '20.51.127.32' 
    }

    stages {
        stage("Checkout repository") {
            steps {
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/Mellowzhong/DevSecOps_lab3']])
            }
        }

        stage("Build Backend and Push Docker image") {
            steps {
                dir("Backend") {
                    sh "./gradlew clean build"
                    script {
                        docker.withRegistry('', DOCKER_CREDENTIALS_ID) {
                            sh "docker build -t victorvaraspro/tingeso-backend:latest ."
                            sh "docker push victorvaraspro/tingeso-backend:latest"
                        }
                    }
                }
            }
        }

        stage("OWASP Dependency Check") {
            steps {
                dir("Backend") {
                    sh """
                        curl -L -o dependency-check.zip https://github.com/jeremylong/DependencyCheck/releases/download/v7.4.4/dependency-check-7.4.4-release.zip

                        # Limpia cualquier versiÃ³n previa antes de descomprimir
                        rm -rf dependency-check

                        unzip dependency-check.zip
                        echo analyzer.assembly.enabled=false > dependency-check/dependency-check.properties

                        dependency-check/bin/dependency-check.sh \
                            --project "tingeso-backend" \
                            --scan . \
                            --format "HTML" \
                            --out "dependency-report" \
                            --propertyfile dependency-check/dependency-check.properties
                    """
                }
            }
            post {
                always {
                    publishHTML(target: [
                        reportDir: 'Backend/dependency-report',
                        reportFiles: 'dependency-check-report.html',
                        reportName: 'OWASP Dependency Report'
                    ])
                }
            }
        }

        stage("SAST SonarQube Backend") {
            steps {
                dir("Backend") {
                    withSonarQubeEnv('SonarQube') {
                        sh "\"${tool 'sonar-scanner'}/bin/sonar-scanner\" -Dsonar.projectKey=DevSecObs-Backend-PrestaBanco -Dsonar.sources=src -Dsonar.java.binaries=target -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml"
                    }
                }
            }
        }

        stage("Build Frontend and Push Docker image") {
            steps {
                dir("Frontend") {
                    sh "npm install"
                    sh "npm run build"
                    script {
                        docker.withRegistry('', DOCKER_CREDENTIALS_ID) {
                            sh "docker build -t victorvaraspro/tingeso-frontend:latest ."
                            sh "docker push victorvaraspro/tingeso-frontend:latest"
                        }
                    }
                }
            }
        }

        stage("SAST SonarQube Frontend") {
            steps {
                dir("Frontend") {
                    withSonarQubeEnv('SonarQube') {
                        sh "\"${tool 'sonar-scanner'}/bin/sonar-scanner\" -Dsonar.projectKey=DevSecObs-frontend-PrestaBanco -Dsonar.sources=src -Dsonar.login=%SONARQUBE_TOKEN%"
                    }
                }
            }
        }

        stage("Deploy Docker Containers") {
            steps {
                script {
                    docker.withRegistry('', DOCKER_CREDENTIALS_ID) {
                        echo "Deploying Backend Container..."

                        // Verificar si el contenedor backend-container ya existe
                        def backendExists = sh(script: "docker ps -a -q -f name=backend-container", returnStdout: true).trim()
                        if (backendExists) {
                            echo "Stopping and removing existing backend-container..."
                            sh "docker stop backend-container || true"
                            sh "docker rm backend-container || true"
                        }

                        // Ejecutar el contenedor del backend con variables de entorno
                        sh "docker run -d --name backend-container -e DB_HOST=${SERVER_IP} -p 8090:8090 victorvaraspro/tingeso-backend:latest"

                        echo "Deploying Frontend Container..."

                        // Verificar si el contenedor frontend-container ya existe
                        def frontendExists = sh(script: "docker ps -a -q -f name=frontend-container", returnStdout: true).trim()
                        if (frontendExists) {
                            echo "Stopping and removing existing frontend-container..."
                            sh "docker stop frontend-container || true"
                            sh "docker rm frontend-container || true"
                        }

                        // Ejecutar el contenedor del frontend
                        sh "docker run -d --name frontend-container -p 5173:80 victorvaraspro/tingeso-frontend:latest"
                    }
                }
            }
        }

        stage('DAST ZAP Scan Frontend') {
            steps {
                script {
                    sh '''
                        echo "Ejecutando ZAP para escanear el frontend en http://${SERVER_IP}:5173"
                        docker run --rm -v $(pwd):/zap/wrk/:rw ghcr.io/zaproxy/zaproxy:stable zap-baseline.py -t http://${SERVER_IP}:5173 -r zap-report.html || exit 0
                    '''
                }
            }
        }

        stage('Verificar archivos generados') {
            steps {
                sh 'ls -al'
            }
        }

        stage('Archivar reporte ZAP') {
            steps {
                archiveArtifacts artifacts: 'zap-report.html', allowEmptyArchive: true
            }
        }
    }
}
